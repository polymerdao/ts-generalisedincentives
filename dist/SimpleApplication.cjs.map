{"version":3,"sources":["../src/evm/contracts/SimpleApplication.ts"],"sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumberish,\n  BytesLike,\n  FunctionFragment,\n  Result,\n  Interface,\n  EventFragment,\n  AddressLike,\n  ContractRunner,\n  ContractMethod,\n  Listener,\n} from \"ethers\";\nimport type {\n  TypedContractEvent,\n  TypedDeferredTopicFilter,\n  TypedEventLog,\n  TypedLogDescription,\n  TypedListener,\n  TypedContractMethod,\n} from \"./common\";\n\nexport declare namespace IMessageEscrowStructs {\n  export type IncentiveDescriptionStruct = {\n    maxGasDelivery: BigNumberish;\n    maxGasAck: BigNumberish;\n    refundGasTo: AddressLike;\n    priceOfDeliveryGas: BigNumberish;\n    priceOfAckGas: BigNumberish;\n    targetDelta: BigNumberish;\n  };\n\n  export type IncentiveDescriptionStructOutput = [\n    maxGasDelivery: bigint,\n    maxGasAck: bigint,\n    refundGasTo: string,\n    priceOfDeliveryGas: bigint,\n    priceOfAckGas: bigint,\n    targetDelta: bigint\n  ] & {\n    maxGasDelivery: bigint;\n    maxGasAck: bigint;\n    refundGasTo: string;\n    priceOfDeliveryGas: bigint;\n    priceOfAckGas: bigint;\n    targetDelta: bigint;\n  };\n}\n\nexport interface SimpleApplicationInterface extends Interface {\n  getFunction(\n    nameOrSignature:\n      | \"receiveAck\"\n      | \"receiveMessage\"\n      | \"setRemoteImplementation\"\n      | \"submitMessage\"\n  ): FunctionFragment;\n\n  getEvent(nameOrSignatureOrTopic: \"Event\"): EventFragment;\n\n  encodeFunctionData(\n    functionFragment: \"receiveAck\",\n    values: [BytesLike, BytesLike, BytesLike]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"receiveMessage\",\n    values: [BytesLike, BytesLike, BytesLike, BytesLike]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"setRemoteImplementation\",\n    values: [BytesLike, BytesLike]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"submitMessage\",\n    values: [\n      BytesLike,\n      BytesLike,\n      BytesLike,\n      IMessageEscrowStructs.IncentiveDescriptionStruct,\n      BigNumberish\n    ]\n  ): string;\n\n  decodeFunctionResult(functionFragment: \"receiveAck\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"receiveMessage\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"setRemoteImplementation\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"submitMessage\",\n    data: BytesLike\n  ): Result;\n}\n\nexport namespace EventEvent {\n  export type InputTuple = [message: BytesLike];\n  export type OutputTuple = [message: string];\n  export interface OutputObject {\n    message: string;\n  }\n  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;\n  export type Filter = TypedDeferredTopicFilter<Event>;\n  export type Log = TypedEventLog<Event>;\n  export type LogDescription = TypedLogDescription<Event>;\n}\n\nexport interface SimpleApplication extends BaseContract {\n  connect(runner?: ContractRunner | null): SimpleApplication;\n  waitForDeployment(): Promise<this>;\n\n  interface: SimpleApplicationInterface;\n\n  queryFilter<TCEvent extends TypedContractEvent>(\n    event: TCEvent,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TypedEventLog<TCEvent>>>;\n  queryFilter<TCEvent extends TypedContractEvent>(\n    filter: TypedDeferredTopicFilter<TCEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TypedEventLog<TCEvent>>>;\n\n  on<TCEvent extends TypedContractEvent>(\n    event: TCEvent,\n    listener: TypedListener<TCEvent>\n  ): Promise<this>;\n  on<TCEvent extends TypedContractEvent>(\n    filter: TypedDeferredTopicFilter<TCEvent>,\n    listener: TypedListener<TCEvent>\n  ): Promise<this>;\n\n  once<TCEvent extends TypedContractEvent>(\n    event: TCEvent,\n    listener: TypedListener<TCEvent>\n  ): Promise<this>;\n  once<TCEvent extends TypedContractEvent>(\n    filter: TypedDeferredTopicFilter<TCEvent>,\n    listener: TypedListener<TCEvent>\n  ): Promise<this>;\n\n  listeners<TCEvent extends TypedContractEvent>(\n    event: TCEvent\n  ): Promise<Array<TypedListener<TCEvent>>>;\n  listeners(eventName?: string): Promise<Array<Listener>>;\n  removeAllListeners<TCEvent extends TypedContractEvent>(\n    event?: TCEvent\n  ): Promise<this>;\n\n  receiveAck: TypedContractMethod<\n    [arg0: BytesLike, arg1: BytesLike, acknowledgement: BytesLike],\n    [void],\n    \"nonpayable\"\n  >;\n\n  receiveMessage: TypedContractMethod<\n    [arg0: BytesLike, arg1: BytesLike, arg2: BytesLike, message: BytesLike],\n    [string],\n    \"nonpayable\"\n  >;\n\n  setRemoteImplementation: TypedContractMethod<\n    [destinationIdentifier: BytesLike, implementation: BytesLike],\n    [void],\n    \"nonpayable\"\n  >;\n\n  submitMessage: TypedContractMethod<\n    [\n      destinationIdentifier: BytesLike,\n      destinationAddress: BytesLike,\n      message: BytesLike,\n      incentive: IMessageEscrowStructs.IncentiveDescriptionStruct,\n      deadline: BigNumberish\n    ],\n    [[bigint, string] & { gasRefund: bigint; messageIdentifier: string }],\n    \"payable\"\n  >;\n\n  getFunction<T extends ContractMethod = ContractMethod>(\n    key: string | FunctionFragment\n  ): T;\n\n  getFunction(\n    nameOrSignature: \"receiveAck\"\n  ): TypedContractMethod<\n    [arg0: BytesLike, arg1: BytesLike, acknowledgement: BytesLike],\n    [void],\n    \"nonpayable\"\n  >;\n  getFunction(\n    nameOrSignature: \"receiveMessage\"\n  ): TypedContractMethod<\n    [arg0: BytesLike, arg1: BytesLike, arg2: BytesLike, message: BytesLike],\n    [string],\n    \"nonpayable\"\n  >;\n  getFunction(\n    nameOrSignature: \"setRemoteImplementation\"\n  ): TypedContractMethod<\n    [destinationIdentifier: BytesLike, implementation: BytesLike],\n    [void],\n    \"nonpayable\"\n  >;\n  getFunction(\n    nameOrSignature: \"submitMessage\"\n  ): TypedContractMethod<\n    [\n      destinationIdentifier: BytesLike,\n      destinationAddress: BytesLike,\n      message: BytesLike,\n      incentive: IMessageEscrowStructs.IncentiveDescriptionStruct,\n      deadline: BigNumberish\n    ],\n    [[bigint, string] & { gasRefund: bigint; messageIdentifier: string }],\n    \"payable\"\n  >;\n\n  getEvent(\n    key: \"Event\"\n  ): TypedContractEvent<\n    EventEvent.InputTuple,\n    EventEvent.OutputTuple,\n    EventEvent.OutputObject\n  >;\n\n  filters: {\n    \"Event(bytes)\": TypedContractEvent<\n      EventEvent.InputTuple,\n      EventEvent.OutputTuple,\n      EventEvent.OutputObject\n    >;\n    Event: TypedContractEvent<\n      EventEvent.InputTuple,\n      EventEvent.OutputTuple,\n      EventEvent.OutputObject\n    >;\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}